{"version":3,"sources":["entities/task/ui/task-card/styles.module.scss","entities/task/ui/task-row/styles.module.scss","features/toggle-task/model/toggle-task.ts","features/toggle-task/ui.tsx","pages/tasks-list/styles.module.scss","features/tasks-filters/config.ts","features/tasks-filters/ui.tsx","pages/tasks-list/index.tsx","entities/task/ui/task-card/index.tsx","entities/task/ui/task-row/index.tsx","shared/config/index.ts","shared/api/typicode/base.ts","shared/api/typicode/tasks.ts","entities/task/model/tasks.ts","entities/task/lib.ts","shared/ui/card.tsx","shared/ui/checkbox.tsx","shared/ui/row.tsx","shared/ui/radio.tsx"],"names":["module","exports","toggleTask","createEvent","taskModel","$tasks","on","state","taskId","produce","draft","task","completed","events","ToggleTask","withStatus","selectors","useTask","status","taskLib","getTaskStatus","onClick","toggleTaskModel","checked","filters","id","title","config","filtersList","Object","values","TasksFilters","reflect","view","loading","onFilterClick","Group","defaultValue","buttonStyle","map","Button","getFilterById","value","disabled","bind","$tasksListLoading","setQueryConfig","TasksList","list","span","data","titleHref","before","source","$tasksFiltered","mapItem","PageContent","variant","combine","isLoading","isEmpty","$tasksListEmpty","cases","size","empty","description","ready","hooks","mounted","effects","getTasksListFx","prepend","TasksListPage","className","styles","root","toolbar","justify","Title","level","Content","content","gutter","TaskCard","children","cardProps","to","TaskRow","cn","getEnvVar","key","undefined","process","Error","API_URL","apiInstance","axios","create","baseURL","BASE_URL","getTasksList","params","get","getTaskById","createEffect","typicodeApi","tasks","getTaskByIdFx","taskSchema","schema","Entity","normalizeTask","normalize","normalizeTasks","tasksInitialState","createStore","doneData","_","payload","entities","$queryConfig","pending","$taskDetailsLoading","$tasksList","tasksList","filter","length","useStore"],"mappings":"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","file":"static/js/5.229c7294.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1Slir\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__fGMdR\",\"completed\":\"styles_completed__2aSOy\"};","import { createEvent } from \"effector\";\nimport produce from \"immer\";\n\nimport { taskModel } from \"entities/task\";\n\nconst toggleTask = createEvent<number>();\n\ntaskModel.$tasks.on(toggleTask, (state, taskId) =>\n  produce(state, (draft) => {\n    const task = draft[taskId];\n    task.completed = !task.completed;\n  })\n);\n\nexport const events = { toggleTask };\n","import { Checkbox } from \"shared/ui/checkbox\";\nimport { taskModel, taskLib } from \"entities/task\";\nimport * as toggleTaskModel from \"./model\";\n\nexport type ToggleTaskProps = {\n    taskId: number;\n    withStatus?: boolean;\n}\n\n// resolve / unresolve\nexport const ToggleTask = ({ taskId, withStatus = true }: ToggleTaskProps) => {\n    const task = taskModel.selectors.useTask(taskId);\n\n    if (!task) return null;\n\n    const status = taskLib.getTaskStatus(task);\n\n    return (\n        <Checkbox\n            onClick={() => toggleTaskModel.events.toggleTask(taskId)}\n            checked={task.completed}\n        >\n            {withStatus && status}\n        </Checkbox>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__3vhW2\",\"toolbar\":\"styles_toolbar__2OJM3\",\"content\":\"styles_content__1K7j8\"};","export type Filter = {\n    id: number;\n    title: string;\n    config: import(\"entities/task\").taskModel.QueryConfig;\n}\n\n// We describe here the dataset of \"Closed\" / \"Open\" filters, etc.\nexport const filters: Record<number, Filter> = {\n    1: {\n        id: 1,\n        title: \"All\",\n        config: {},\n    },\n    2: {\n        id: 2,\n        title: \"Opened\",\n        config: { completed: false },\n    },\n    3: {\n        id: 3,\n        title: \"Closed\",\n        config: { completed: true },\n    },\n};\n\nexport const DEFAULT_FILTER = 1;\n\nexport const filtersList = Object.values(filters);\n\nexport const getFilterById = (id: number) => filters[id];\n","import { reflect } from \"@effector/reflect\";\n\nimport { Radio } from \"shared/ui/radio\";\nimport { taskModel } from \"entities/task\";\nimport { filtersList, getFilterById, DEFAULT_FILTER } from \"./config\";\n\ntype Props = {\n  loading: boolean;\n  onFilterClick: (p: taskModel.QueryConfig) => void;\n};\n\nconst View = ({ loading, onFilterClick }: Props) => {\n  return (\n    <Radio.Group defaultValue={DEFAULT_FILTER} buttonStyle=\"solid\">\n      {filtersList.map(({ title, id }) => (\n        <Radio.Button\n          key={id}\n          onClick={() => onFilterClick(getFilterById(id).config)}\n          value={id}\n          disabled={loading}\n        >\n          {title}\n        </Radio.Button>\n      ))}\n    </Radio.Group>\n  );\n};\n\n// The use of effector-reflect here is optional and not critical within the methodology\nexport const TasksFilters = reflect({\n  view: View,\n  bind: {\n    loading: taskModel.$tasksListLoading,\n    onFilterClick: taskModel.events.setQueryConfig,\n  },\n});\n","import { Layout, Row, Col, Typography, Spin, Empty } from \"shared/ui\";\nimport { variant, list } from \"@effector/reflect\";\nimport { combine } from \"effector\";\n\nimport { TasksFilters } from \"features/tasks-filters\";\nimport { ToggleTask } from \"features/toggle-task\";\nimport { TaskRow, taskModel } from \"entities/task\";\nimport styles from \"./styles.module.scss\";\n\nconst TasksListPage = () => {\n  return (\n    <Layout className={styles.root}>\n      <Layout className={styles.toolbar}>\n        {/* ~ Layout.Toolbar */}\n        <Row justify=\"center\">\n          <Typography.Title level={1}>Tasks List</Typography.Title>\n        </Row>\n        <Row justify=\"center\">\n          <TasksFilters />\n        </Row>\n      </Layout>\n      <Layout.Content className={styles.content}>\n        <Row gutter={[0, 20]} justify=\"center\">\n          <PageContent />\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nconst ListItemView: React.FC<{ task: import(\"shared/api\").Task }> = ({ task }) => {\n  return (\n    <Col key={task.id} span={24}>\n      <TaskRow\n        data={task}\n        titleHref={`/${task.id}`}\n        before={<ToggleTask taskId={task.id} withStatus={false} />}\n      />\n    </Col>\n  );\n};\n\n// The use of effector-reflect here is optional and not critical within the methodology\nconst TasksList = list({\n  view: ListItemView,\n  source: taskModel.$tasksFiltered,\n  bind: {},\n  mapItem: {\n    task: (task) => task,\n  },\n});\n\n// The use of effector-reflect here is optional and not critical within the methodology\nconst PageContent = variant({\n  source: combine(\n    {\n      isLoading: taskModel.$tasksListLoading,\n      isEmpty: taskModel.$tasksListEmpty,\n    },\n    ({ isLoading, isEmpty }) => {\n      if (isLoading) return \"loading\";\n      if (isEmpty) return \"empty\";\n      return \"ready\";\n    }\n  ),\n  cases: {\n    loading: () => <Spin size=\"large\" />,\n    empty: () => <Empty description=\"No tasks found\" />,\n    ready: TasksList,\n  },\n  hooks: {\n    mounted: taskModel.effects.getTasksListFx.prepend(() => {}),\n  },\n});\n\nexport default TasksListPage;\n","import type { PropsWithChildren } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"shared/ui/card\";\nimport styles from \"./styles.module.scss\";\n\nexport type TaskCardProps = PropsWithChildren<{\n    data?: import(\"shared/api\").Task;\n    titleHref?: string;\n}> & import(\"antd\").CardProps;\n\nexport const TaskCard = ({ data, titleHref, children, ...cardProps }: TaskCardProps) => {\n    if (!data && !cardProps.loading) return null;\n\n    return (\n        <Card\n            title={`Task#${cardProps.loading ? \"\" : data?.id}`}\n            className={styles.root}\n            {...cardProps}\n        >\n            {titleHref ? <Link to={titleHref}>{data?.title}</Link> : data?.title}\n            {children}\n        </Card>\n    );\n};\n","import type { PropsWithChildren, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { Row } from \"shared/ui/row\";\nimport styles from \"./styles.module.scss\";\n\nexport type TaskRowProps = PropsWithChildren<{\n    data: import(\"shared/api\").Task;\n    titleHref?: string;\n    before?: ReactNode;\n}>;\n\nexport const TaskRow = ({ data, before, titleHref }: TaskRowProps) => {\n    const title = titleHref ? <Link to={titleHref}>{data.title}</Link> : data.title\n\n    return (\n        <Row className={cn(styles.root, { [styles.completed]: data.completed })}>\n            {before}\n            {title}\n        </Row>\n    )\n}\n","/**\n * Env-variables initialization module\n * @remark If the value of at least one variable is not found,\n * The application will immediately throw an error when initializing the module\n * @module\n */\n\n/**\n * Getting an env variable\n * @throwable\n */\n const getEnvVar = (key: string) => {\n    if (process.env[key] === undefined) {\n        throw new Error(`Env variable ${key} is required`);\n    }\n    return process.env[key] || \"\";\n};\n\n/** API entrypoint */\nexport const API_URL = getEnvVar(\"REACT_APP_API_URL\");\n\n/** Program start mode */\nexport const NODE_ENV = getEnvVar(\"NODE_ENV\");\n/** Development mode */\nexport const isDevEnv = NODE_ENV === \"development\";\n/** Production mode */\nexport const isProdEnv = NODE_ENV === \"production\";\n","import axios from \"axios\";\nimport { API_URL } from \"shared/config\";\n\n// Potentially, you could pass an accessToken\nexport const apiInstance = axios.create({\n    baseURL: API_URL\n});\n","import type { AxiosPromise } from \"axios\";\nimport { apiInstance } from \"./base\";\nimport type { Task } from \"./models\";\n\nconst BASE_URL = \"/todos\"\n\nexport type GetTasksListParams = {\n    userId?: number;\n    completed?: boolean;\n};\n\nexport const getTasksList = (params?: GetTasksListParams): AxiosPromise<Task[]> => {\n    return apiInstance.get(BASE_URL, { params });\n};\n\nexport type GetTaskByIdParams = {\n    taskId: number;\n    [x: string]: any;\n};\n\nexport const getTaskById = ({ taskId, ...params }: GetTaskByIdParams): AxiosPromise<Task> => {\n    return apiInstance.get(`${BASE_URL}/${taskId}`, { params });\n};\n","import { createStore, combine, createEffect, createEvent } from \"effector\";\nimport { useStore } from \"effector-react\";\nimport { normalize, schema } from \"normalizr\";\n\nimport { typicodeApi } from \"shared/api\";\nimport type { Task } from \"shared/api\";\n\nexport type QueryConfig = {\n  completed?: boolean;\n  userId?: number;\n};\n\n\nconst setQueryConfig = createEvent<QueryConfig>();\n\n\n// Each effect can also have its own additional processing\nconst getTasksListFx = createEffect((params?: typicodeApi.tasks.GetTasksListParams) => {\n  return typicodeApi.tasks.getTasksList(params);\n});\nconst getTaskByIdFx = createEffect((params: typicodeApi.tasks.GetTaskByIdParams) => {\n  return typicodeApi.tasks.getTaskById(params);\n});\n\n\n// It is possible to bring normalization to the API level\nexport const taskSchema = new schema.Entity(\"tasks\");\nexport const normalizeTask = (data: Task) => normalize(data, taskSchema);\nexport const normalizeTasks = (data: Task[]) => normalize(data, [taskSchema]);\n\n\n// It is not critical within the demo, but you can also store it as an array without normalization\nexport const tasksInitialState: Record<number, Task> = {};\nexport const $tasks = createStore(tasksInitialState)\n  .on(getTasksListFx.doneData, (_, payload) => normalizeTasks(payload.data).entities.tasks)\n  .on(getTaskByIdFx.doneData, (state, payload) => ({\n    ...state,\n    ...normalizeTask(payload.data).entities.tasks,\n  }))\n\n\n// You can put it in a separate directory (for storing multiple models)\nexport const $queryConfig = createStore<QueryConfig>({})\n  .on(setQueryConfig, (_, payload) => payload)\n\n// You can add potentially debounceable logic\nexport const $tasksListLoading = getTasksListFx.pending;\nexport const $taskDetailsLoading = getTaskByIdFx.pending;\n\n\n/**\n * \"List\" of tasks\n */\nexport const $tasksList = combine($tasks, (tasks) => Object.values(tasks));\n\n/**\n * Filtered tasks\n * @remark It is possible to handle it at the effect level - but then you need to plug additional logic into the store\n * > For example, hide/show task at `toggleTask` event\n */\nexport const $tasksFiltered = combine(\n  $tasksList,\n  $queryConfig,\n  (tasksList, config) => {\n    return tasksList.filter(task => (\n      config.completed === undefined ||\n      task.completed === config.completed\n  ))},\n);\n\nexport const $tasksListEmpty = $tasksFiltered.map((list) => list.length === 0);\n\n// If desired, you can have a separate selector that is not tied to react bindings\nconst useTask = (taskId: number): import(\"shared/api\").Task | undefined => {\n  return useStore($tasks)[taskId];\n};\n\nexport const events = { setQueryConfig };\n\nexport const effects = {\n  getTaskByIdFx,\n  getTasksListFx,\n};\n\nexport const selectors = {\n  useTask,\n};\n","import type { Task } from \"shared/api\";\n\nexport const getTaskStatus = (data: Task) => {\n    return data.completed ? \"CLOSED\" : \"OPENED\";\n};\n","export { Card } from \"antd\";\n","export { Checkbox } from \"antd\";\n","export { Row } from \"antd\";\n","export { Radio } from \"antd\";\n"],"sourceRoot":""}