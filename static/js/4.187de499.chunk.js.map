{"version":3,"sources":["entities/task/ui/task-card/styles.module.scss","entities/task/ui/task-row/styles.module.scss","features/toggle-task/model/toggle-task.ts","features/toggle-task/ui.tsx","pages/task-details/styles.module.scss","pages/task-details/index.tsx","entities/task/ui/task-card/index.tsx","entities/task/ui/task-row/index.tsx","shared/config/index.ts","shared/api/typicode/base.ts","shared/api/typicode/tasks.ts","entities/task/model/tasks.ts","entities/task/lib.ts","shared/ui/card.tsx","shared/ui/checkbox.tsx","shared/ui/row.tsx","shared/ui/radio.tsx"],"names":["module","exports","toggleTask","createEvent","taskModel","$tasks","on","state","taskId","produce","draft","task","completed","events","ToggleTask","withStatus","selectors","useTask","status","taskLib","getTaskStatus","onClick","toggleTaskModel","checked","TaskDetailsPage","reflect","view","match","isLoading","Number","params","useEffect","effects","getTaskByIdFx","className","styles","root","Content","content","data","size","loading","card","bodyStyle","height","extra","to","actions","title","subTitle","type","bind","$taskDetailsLoading","TaskCard","titleHref","children","cardProps","id","TaskRow","before","cn","getEnvVar","key","undefined","process","Error","API_URL","apiInstance","axios","create","baseURL","BASE_URL","getTasksList","get","getTaskById","setQueryConfig","getTasksListFx","createEffect","typicodeApi","tasks","taskSchema","schema","Entity","normalizeTask","normalize","normalizeTasks","tasksInitialState","createStore","doneData","_","payload","entities","$queryConfig","$tasksListLoading","pending","$tasksList","combine","Object","values","$tasksFiltered","tasksList","config","filter","$tasksListEmpty","map","list","length","useStore"],"mappings":"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","file":"static/js/4.187de499.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1Slir\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__fGMdR\",\"completed\":\"styles_completed__2aSOy\"};","import { createEvent } from \"effector\";\nimport produce from \"immer\";\n\nimport { taskModel } from \"entities/task\";\n\nconst toggleTask = createEvent<number>();\n\ntaskModel.$tasks.on(toggleTask, (state, taskId) =>\n  produce(state, (draft) => {\n    const task = draft[taskId];\n    task.completed = !task.completed;\n  })\n);\n\nexport const events = { toggleTask };\n","import { Checkbox } from \"shared/ui/checkbox\";\nimport { taskModel, taskLib } from \"entities/task\";\nimport * as toggleTaskModel from \"./model\";\n\nexport type ToggleTaskProps = {\n    taskId: number;\n    withStatus?: boolean;\n}\n\n// resolve / unresolve\nexport const ToggleTask = ({ taskId, withStatus = true }: ToggleTaskProps) => {\n    const task = taskModel.selectors.useTask(taskId);\n\n    if (!task) return null;\n\n    const status = taskLib.getTaskStatus(task);\n\n    return (\n        <Checkbox\n            onClick={() => toggleTaskModel.events.toggleTask(taskId)}\n            checked={task.completed}\n        >\n            {withStatus && status}\n        </Checkbox>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1aFqh\",\"content\":\"styles_content__3IC4G\",\"card\":\"styles_card__hyz1A\"};","import { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Layout, Result, Button } from \"shared/ui\";\nimport { reflect } from \"@effector/reflect\";\n\nimport { ToggleTask } from \"features/toggle-task\";\nimport { TaskCard, taskModel } from \"entities/task\";\nimport styles from \"./styles.module.scss\";\n\ntype Props = import(\"react-router-dom\").RouteChildrenProps<{\n    taskId: string;\n}> & {\n    isLoading: boolean;\n};\n\nconst View = ({ match, isLoading }: Props) => {\n    const taskId = Number(match?.params.taskId);\n    const task = taskModel.selectors.useTask(taskId);\n\n    useEffect(() => {\n        taskModel.effects.getTaskByIdFx({ taskId });\n    }, [taskId]);\n\n    // You can move some logic to entity/task/card (as a container)\n    if (!task && !isLoading) {\n        return (\n            <Result\n                status=\"404\"\n                title=\"404\"\n                subTitle=\"Task was not found\"\n                extra={<Link to=\"/\"><Button type=\"primary\">Back to tasks list {taskId}</Button></Link>}\n            />\n        )\n    }\n\n    return (\n        <Layout className={styles.root}>\n            <Layout.Content className={styles.content}>\n                <TaskCard\n                    data={task}\n                    size=\"default\"\n                    loading={isLoading}\n                    className={styles.card}\n                    bodyStyle={{ height: 400 }}\n                    extra={<Link to=\"/\">Back to TasksList</Link>}\n                    actions={[\n                        <ToggleTask key=\"toggle\" taskId={taskId} />\n                    ]}\n                />\n            </Layout.Content>\n        </Layout>\n    )\n};\n\n// The use of effector-reflect here is optional and not critical within the methodology\nconst TaskDetailsPage = reflect({\n    view: View,\n    bind: {\n        isLoading: taskModel.$taskDetailsLoading,\n    }\n});\n\nexport default TaskDetailsPage;\n","import type { PropsWithChildren } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"shared/ui/card\";\nimport styles from \"./styles.module.scss\";\n\nexport type TaskCardProps = PropsWithChildren<{\n    data?: import(\"shared/api\").Task;\n    titleHref?: string;\n}> & import(\"antd\").CardProps;\n\nexport const TaskCard = ({ data, titleHref, children, ...cardProps }: TaskCardProps) => {\n    if (!data && !cardProps.loading) return null;\n\n    return (\n        <Card\n            title={`Task#${cardProps.loading ? \"\" : data?.id}`}\n            className={styles.root}\n            {...cardProps}\n        >\n            {titleHref ? <Link to={titleHref}>{data?.title}</Link> : data?.title}\n            {children}\n        </Card>\n    );\n};\n","import type { PropsWithChildren, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { Row } from \"shared/ui/row\";\nimport styles from \"./styles.module.scss\";\n\nexport type TaskRowProps = PropsWithChildren<{\n    data: import(\"shared/api\").Task;\n    titleHref?: string;\n    before?: ReactNode;\n}>;\n\nexport const TaskRow = ({ data, before, titleHref }: TaskRowProps) => {\n    const title = titleHref ? <Link to={titleHref}>{data.title}</Link> : data.title\n\n    return (\n        <Row className={cn(styles.root, { [styles.completed]: data.completed })}>\n            {before}\n            {title}\n        </Row>\n    )\n}\n","/**\n * Env-variables initialization module\n * @remark If the value of at least one variable is not found,\n * The application will immediately throw an error when initializing the module\n * @module\n */\n\n/**\n * Getting an env variable\n * @throwable\n */\n const getEnvVar = (key: string) => {\n    if (process.env[key] === undefined) {\n        throw new Error(`Env variable ${key} is required`);\n    }\n    return process.env[key] || \"\";\n};\n\n/** API entrypoint */\nexport const API_URL = getEnvVar(\"REACT_APP_API_URL\");\n\n/** Program start mode */\nexport const NODE_ENV = getEnvVar(\"NODE_ENV\");\n/** Development mode */\nexport const isDevEnv = NODE_ENV === \"development\";\n/** Production mode */\nexport const isProdEnv = NODE_ENV === \"production\";\n","import axios from \"axios\";\nimport { API_URL } from \"shared/config\";\n\n// Potentially, you could pass an accessToken\nexport const apiInstance = axios.create({\n    baseURL: API_URL\n});\n","import type { AxiosPromise } from \"axios\";\nimport { apiInstance } from \"./base\";\nimport type { Task } from \"./models\";\n\nconst BASE_URL = \"/todos\"\n\nexport type GetTasksListParams = {\n    userId?: number;\n    completed?: boolean;\n};\n\nexport const getTasksList = (params?: GetTasksListParams): AxiosPromise<Task[]> => {\n    return apiInstance.get(BASE_URL, { params });\n};\n\nexport type GetTaskByIdParams = {\n    taskId: number;\n    [x: string]: any;\n};\n\nexport const getTaskById = ({ taskId, ...params }: GetTaskByIdParams): AxiosPromise<Task> => {\n    return apiInstance.get(`${BASE_URL}/${taskId}`, { params });\n};\n","import { createStore, combine, createEffect, createEvent } from \"effector\";\nimport { useStore } from \"effector-react\";\nimport { normalize, schema } from \"normalizr\";\n\nimport { typicodeApi } from \"shared/api\";\nimport type { Task } from \"shared/api\";\n\nexport type QueryConfig = {\n  completed?: boolean;\n  userId?: number;\n};\n\n\nconst setQueryConfig = createEvent<QueryConfig>();\n\n\n// Each effect can also have its own additional processing\nconst getTasksListFx = createEffect((params?: typicodeApi.tasks.GetTasksListParams) => {\n  return typicodeApi.tasks.getTasksList(params);\n});\nconst getTaskByIdFx = createEffect((params: typicodeApi.tasks.GetTaskByIdParams) => {\n  return typicodeApi.tasks.getTaskById(params);\n});\n\n\n// It is possible to bring normalization to the API level\nexport const taskSchema = new schema.Entity(\"tasks\");\nexport const normalizeTask = (data: Task) => normalize(data, taskSchema);\nexport const normalizeTasks = (data: Task[]) => normalize(data, [taskSchema]);\n\n\n// It is not critical within the demo, but you can also store it as an array without normalization\nexport const tasksInitialState: Record<number, Task> = {};\nexport const $tasks = createStore(tasksInitialState)\n  .on(getTasksListFx.doneData, (_, payload) => normalizeTasks(payload.data).entities.tasks)\n  .on(getTaskByIdFx.doneData, (state, payload) => ({\n    ...state,\n    ...normalizeTask(payload.data).entities.tasks,\n  }))\n\n\n// You can put it in a separate directory (for storing multiple models)\nexport const $queryConfig = createStore<QueryConfig>({})\n  .on(setQueryConfig, (_, payload) => payload)\n\n// You can add potentially debounceable logic\nexport const $tasksListLoading = getTasksListFx.pending;\nexport const $taskDetailsLoading = getTaskByIdFx.pending;\n\n\n/**\n * \"List\" of tasks\n */\nexport const $tasksList = combine($tasks, (tasks) => Object.values(tasks));\n\n/**\n * Filtered tasks\n * @remark It is possible to handle it at the effect level - but then you need to plug additional logic into the store\n * > For example, hide/show task at `toggleTask` event\n */\nexport const $tasksFiltered = combine(\n  $tasksList,\n  $queryConfig,\n  (tasksList, config) => {\n    return tasksList.filter(task => (\n      config.completed === undefined ||\n      task.completed === config.completed\n  ))},\n);\n\nexport const $tasksListEmpty = $tasksFiltered.map((list) => list.length === 0);\n\n// If desired, you can have a separate selector that is not tied to react bindings\nconst useTask = (taskId: number): import(\"shared/api\").Task | undefined => {\n  return useStore($tasks)[taskId];\n};\n\nexport const events = { setQueryConfig };\n\nexport const effects = {\n  getTaskByIdFx,\n  getTasksListFx,\n};\n\nexport const selectors = {\n  useTask,\n};\n","import type { Task } from \"shared/api\";\n\nexport const getTaskStatus = (data: Task) => {\n    return data.completed ? \"CLOSED\" : \"OPENED\";\n};\n","export { Card } from \"antd\";\n","export { Checkbox } from \"antd\";\n","export { Row } from \"antd\";\n","export { Radio } from \"antd\";\n"],"sourceRoot":""}